{"version":3,"sources":["webpack:///./src/app/assign-rooms/assign-rooms.module.ts","webpack:///./src/app/assign-rooms/assign-rooms.page.html","webpack:///./src/app/assign-rooms/assign-rooms.page.scss","webpack:///./src/app/assign-rooms/assign-rooms.page.ts"],"names":[],"mappings":"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","file":"assign-rooms-assign-rooms-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AssignRoomsPage } from './assign-rooms.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AssignRoomsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AssignRoomsPage]\n})\nexport class AssignRoomsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button menu=\\\"m1\\\"></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Assign Rooms</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <!-- <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n    <ion-refresher-content></ion-refresher-content>\\n  </ion-refresher> -->\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size-sm=\\\"6\\\" offset-sm=\\\"3\\\">\\n        <ion-card *ngIf=\\\"roomList$ | async as roomList\\\">\\n          <ion-card-title text-center>Your assigned rooms</ion-card-title>\\n          <ion-card-header *ngIf=\\\"(roomList$ | async)?.length <= 0\\\"\\n            >No rooms assigned yet</ion-card-header\\n          >\\n          <ion-card-content>\\n            <ion-list *ngFor=\\\"let assignedRoom of roomList\\\">\\n              <ion-item>\\n                {{ assignedRoom.roomNum }}\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n    <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"assignRooms()\\\">\\n      <ion-row>\\n        <ion-col size-sm=\\\"6\\\" offset-sm=\\\"3\\\">\\n          <ion-list>\\n            <ion-label position=\\\"floating\\\">Choose rooms to assign:</ion-label>\\n            <ion-select\\n              placeholder=\\\"Select Rooms\\\"\\n              [(ngModel)]=\\\"assignRoomsVar\\\"\\n              name=\\\"rooms\\\"\\n              required\\n              multiple=\\\"true\\\"\\n            >\\n              <ion-select-option\\n                *ngFor=\\\"let room of allRooms$ | async\\\"\\n                [value]=\\\"room.roomNum\\\"\\n              >\\n                {{ room.roomNum }}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-list>\\n          <ion-button\\n            type=\\\"submit\\\"\\n            color=\\\"primary\\\"\\n            expand=\\\"block\\\"\\n            [disabled]=\\\"!f.valid\\\"\\n            >Assign</ion-button\\n          >\\n        </ion-col>\\n      </ion-row>\\n    </form>\\n    <form #f2=\\\"ngForm\\\" (ngSubmit)=\\\"unassignRooms()\\\">\\n      <ion-row>\\n        <ion-col size-sm=\\\"6\\\" offset-sm=\\\"3\\\">\\n          <ion-list>\\n            <ion-label position=\\\"floating\\\">Choose rooms to unassign:</ion-label>\\n            <ion-select\\n              placeholder=\\\"Select Rooms\\\"\\n              [(ngModel)]=\\\"unassignRoomsVar\\\"\\n              name=\\\"rooms\\\"\\n              required\\n              multiple=\\\"true\\\"\\n            >\\n              <ion-select-option\\n                *ngFor=\\\"let room of roomList$ | async\\\"\\n                [value]=\\\"room.roomNum\\\"\\n              >\\n                {{ room.roomNum }}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-list>\\n          <ion-button\\n            type=\\\"submit\\\"\\n            color=\\\"primary\\\"\\n            expand=\\\"block\\\"\\n            [disabled]=\\\"!f2.valid\\\"\\n            >UnAssign</ion-button\\n          >\\n        </ion-col>\\n      </ion-row>\\n    </form>\\n  </ion-grid>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Fzc2lnbi1yb29tcy9hc3NpZ24tcm9vbXMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { UsersService } from '../users/users.service';\nimport { Room } from '../users/room.model';\nimport { AuthService } from '../auth/auth.service';\nimport {\n  AngularFirestoreDocument,\n  AngularFirestore\n} from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-assign-rooms',\n  templateUrl: './assign-rooms.page.html',\n  styleUrls: ['./assign-rooms.page.scss']\n})\nexport class AssignRoomsPage implements OnInit {\n  assignRoomsVar: any;\n  unassignRoomsVar: any;\n  roomDoc: AngularFirestoreDocument<Room>;\n\n  allRooms$: Observable<Room[]>;\n  roomList$: Observable<Room[]>;\n  nurseId$: Observable<string>;\n\n  constructor(\n    private userService: UsersService,\n    private authService: AuthService,\n    private firestore: AngularFirestore\n  ) {}\n\n  ngOnInit() {\n    this.allRooms$ = this.userService.getRooms();\n    this.roomList$ = this.userService.getRoomsAssigned();\n    this.nurseId$ = this.authService.userId;\n  }\n\n  ionViewWillEnter() {\n    this.allRooms$ = this.userService.getRooms();\n    this.roomList$ = this.userService.getRoomsAssigned();\n    this.nurseId$ = this.authService.userId;\n  }\n\n  assignRooms() {\n    let nurseId: string;\n    this.nurseId$.subscribe(x => {\n      nurseId = x;\n    });\n    this.assignRoomsVar.forEach(element => {\n      this.roomDoc = this.firestore.doc('rooms/' + element);\n      this.roomDoc.update({ assignedNurse: nurseId });\n    });\n    this.assignRoomsVar = [];\n  }\n  unassignRooms() {\n    let nurseId: string;\n    this.nurseId$.subscribe(x => {\n      nurseId = x;\n    });\n    console.log(this.unassignRoomsVar);\n    this.unassignRoomsVar.forEach(element => {\n      this.roomDoc = this.firestore.doc('rooms/' + element);\n      this.roomDoc.update({ assignedNurse: '' });\n    });\n    this.unassignRoomsVar = [];\n  }\n\n  // doRefresh(event) {\n  //   console.log('Begin async operation');\n\n  //   setTimeout(() => {\n  //     this.ngOnInit();\n  //     event.target.complete();\n  //   }, 2000);\n  // }\n}\n"],"sourceRoot":""}